name: 持续集成

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 代码测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装uv包管理器
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: 安装依赖
      run: |
        uv sync --dev

    - name: 代码格式检查
      run: |
        uv run black --check .
        uv run isort --check-only .
      continue-on-error: true

    - name: 代码质量检查
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true

    - name: 语法检查
      run: |
        python -m py_compile meeting_extractor.py
        python -m py_compile build.py

  build-test:
    name: 构建测试 ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装uv包管理器
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: 添加uv到PATH (Windows)
      if: matrix.os == 'windows-latest'
      run: echo "$env:USERPROFILE\\.cargo\\bin" >> $env:GITHUB_PATH

    - name: 添加uv到PATH (Unix)
      if: matrix.os != 'windows-latest'
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: 安装项目依赖
      run: |
        uv sync --dev
      shell: bash

    - name: 测试构建脚本
      run: |
        uv run python build.py --help
      shell: bash

    - name: 快速构建测试 (仅检查依赖)
      run: |
        uv run python -c "
        import sys
        import subprocess
        
        # 检查PyInstaller是否可用
        try:
            result = subprocess.run([sys.executable, '-m', 'PyInstaller', '--version'], 
                                  capture_output=True, text=True, check=True)
            print(f'✅ PyInstaller可用: {result.stdout.strip()}')
        except Exception as e:
            print(f'❌ PyInstaller检查失败: {e}')
            sys.exit(1)
        
        # 检查主要依赖
        try:
            import volcenginesdkarkruntime
            import pydantic 
            import dotenv
            import openpyxl
            print('✅ 主要依赖包检查通过')
        except ImportError as e:
            print(f'❌ 依赖包导入失败: {e}')
            sys.exit(1)
        "
      shell: bash

  dependency-check:
    name: 依赖安全检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 安装uv包管理器
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: 检查依赖版本
      run: |
        uv sync --dev
        echo "=== 核心依赖版本 ==="
        uv run python -c "
        try:
            import volcenginesdkarkruntime
            print('✅ volcengine-python-sdk安装成功')
        except ImportError:
            print('❌ volcengine-python-sdk导入失败')
        
        try:
            import pydantic
            print(f'✅ pydantic版本: {pydantic.__version__}')
        except ImportError:
            print('❌ pydantic导入失败')
            
        try:
            import dotenv
            print('✅ python-dotenv安装成功')
        except ImportError:
            print('❌ python-dotenv导入失败')
            
        try:
            import openpyxl
            print(f'✅ openpyxl版本: {openpyxl.__version__}')
        except ImportError:
            print('❌ openpyxl导入失败')
        "

    - name: 检查锁定文件
      run: |
        if [ -f "uv.lock" ]; then
          echo "✅ uv.lock文件存在"
          echo "锁定文件信息:"
          head -20 uv.lock
        else
          echo "⚠️ uv.lock文件不存在"
        fi 